{"version":3,"file":"js/7188-a44914a11ab8d3cab66d.chunk.js","mappings":"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","sources":["webpack://prsdigg/./app/packs/apps/dashboard/components/ListComponent/ListComponent.tsx","webpack://prsdigg/./app/packs/apps/dashboard/pages/SubscriptionsPage/components/MyAuthoringSubscriptionsComponent.tsx","webpack://prsdigg/./app/packs/apps/dashboard/pages/SubscriptionsPage/components/MyCommentingSubscriptionsComponent.tsx","webpack://prsdigg/./app/packs/apps/dashboard/pages/SubscriptionsPage/components/MyReadingSubscriptionsComponent.tsx","webpack://prsdigg/./app/packs/apps/dashboard/pages/SubscriptionsPage/components/MyTagSubscriptionsComponent.tsx","webpack://prsdigg/./app/packs/apps/dashboard/pages/SubscriptionsPage/SubscriptionsPage.tsx"],"sourcesContent":["import { Button, List } from 'antd';\nimport { useUserAgent } from 'apps/shared';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nexport default function ListComponent(props: {\n  dataSource: any;\n  hasNextPage: boolean;\n  loading: boolean;\n  fetchMore: () => any;\n  renderItem: any;\n}) {\n  const { isMobile } = useUserAgent();\n  const { t } = useTranslation();\n  const { dataSource, hasNextPage, loading, fetchMore, renderItem } = props;\n  return (\n    <List\n      size='small'\n      dataSource={dataSource}\n      itemLayout={isMobile.phone ? 'vertical' : 'horizontal'}\n      loadMore={\n        hasNextPage && (\n          <div\n            style={{\n              textAlign: 'center',\n              marginTop: 12,\n              height: 32,\n              lineHeight: '32px',\n            }}\n          >\n            <Button loading={loading} onClick={fetchMore}>\n              {t('load_more')}\n            </Button>\n          </div>\n        )\n      }\n      renderItem={renderItem}\n    />\n  );\n}\n","import { Avatar, Button, Divider, List, Popconfirm, Space } from 'antd';\nimport ListComponent from 'apps/dashboard/components/ListComponent/ListComponent';\nimport LoadingComponent from 'apps/dashboard/components/LoadingComponent/LoadingComponent';\nimport {\n  useMyAuthoringSubscriptionConnectionQuery,\n  User,\n  useToggleAuthoringSubscribeUserActionMutation,\n} from 'graphqlTypes';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nexport default function MyAuthoringSubscriptionsComponent() {\n  const { t } = useTranslation();\n  const { loading, data, fetchMore, refetch } =\n    useMyAuthoringSubscriptionConnectionQuery();\n  const [toggleAuthoringSubscribeUserAction] =\n    useToggleAuthoringSubscribeUserActionMutation({\n      update() {\n        refetch();\n      },\n    });\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  const {\n    myAuthoringSubscriptionConnection: {\n      nodes: authoringSubscriptions,\n      pageInfo: { hasNextPage, endCursor },\n    },\n  } = data;\n\n  return (\n    <ListComponent\n      loading={loading}\n      hasNextPage={hasNextPage}\n      fetchMore={() => fetchMore({ variables: { after: endCursor } })}\n      dataSource={authoringSubscriptions}\n      renderItem={(user: Partial<User>) => (\n        <List.Item\n          key={user.id}\n          actions={[\n            <Popconfirm\n              title={t('confirm_to_unsubscribe')}\n              onConfirm={() =>\n                toggleAuthoringSubscribeUserAction({\n                  variables: { input: { mixinId: user.mixinId } },\n                })\n              }\n            >\n              <Button size='small'>{t('unsubscribe')}</Button>\n            </Popconfirm>,\n          ]}\n        >\n          <List.Item.Meta\n            title={\n              <a href={`/users/${user.mixinId}`} target='_blank'>\n                {user.name}\n              </a>\n            }\n            avatar={<Avatar src={user.avatar}>{user.name[0]}</Avatar>}\n            description={\n              <Space split={<Divider type='vertical' />} wrap>\n                {`${t('user.articles_count')}: ${\n                  user.statistics.articlesCount\n                }`}\n                {`${t(\n                  'user.author_revenue_total',\n                )}: ${user.statistics.authorRevenueTotalUsd.toFixed(2)}`}\n              </Space>\n            }\n          />\n        </List.Item>\n      )}\n    />\n  );\n}\n","import { Button, Divider, List, Popconfirm, Space } from 'antd';\nimport ListComponent from 'apps/dashboard/components/ListComponent/ListComponent';\nimport LoadingComponent from 'apps/dashboard/components/LoadingComponent/LoadingComponent';\nimport {\n  Article,\n  useMyCommentingSubscriptionConnectionQuery,\n  useToggleCommentingSubscribeArticleActionMutation,\n} from 'graphqlTypes';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nexport default function MyCommentingSubscriptionsComponent() {\n  const { t } = useTranslation();\n  const { loading, data, fetchMore, refetch } =\n    useMyCommentingSubscriptionConnectionQuery();\n\n  const [toggleCommentingSubscribeArticleAction] =\n    useToggleCommentingSubscribeArticleActionMutation({\n      update() {\n        refetch();\n      },\n    });\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  const {\n    myCommentingSubscriptionConnection: {\n      nodes: commentingSubscriptions,\n      pageInfo: { hasNextPage, endCursor },\n    },\n  } = data;\n\n  return (\n    <ListComponent\n      loading={loading}\n      hasNextPage={hasNextPage}\n      fetchMore={() => fetchMore({ variables: { after: endCursor } })}\n      dataSource={commentingSubscriptions}\n      renderItem={(article: Partial<Article>) => (\n        <List.Item\n          key={article.uuid}\n          actions={[\n            <Popconfirm\n              title={t('confirm_to_unsubscribe')}\n              onConfirm={() =>\n                toggleCommentingSubscribeArticleAction({\n                  variables: { input: { uuid: article.uuid } },\n                })\n              }\n            >\n              <Button size='small'>{t('unsubscribe')}</Button>\n            </Popconfirm>,\n          ]}\n        >\n          <List.Item.Meta\n            title={\n              <a href={`/articles/${article.uuid}`} target='_blank'>\n                {article.title}\n              </a>\n            }\n            description={\n              <Space split={<Divider type='vertical' />}>\n                {`${t('article.comments_count')}: ${article.commentsCount}`}\n              </Space>\n            }\n          />\n        </List.Item>\n      )}\n    />\n  );\n}\n","import { Avatar, Button, Divider, List, Popconfirm, Space } from 'antd';\nimport ListComponent from 'apps/dashboard/components/ListComponent/ListComponent';\nimport LoadingComponent from 'apps/dashboard/components/LoadingComponent/LoadingComponent';\nimport {\n  useMyReadingSubscriptionConnectionQuery,\n  User,\n  useToggleReadingSubscribeUserActionMutation,\n} from 'graphqlTypes';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nexport default function MyReadingSubscriptionsComponent() {\n  const { t } = useTranslation();\n  const { loading, data, fetchMore, refetch } =\n    useMyReadingSubscriptionConnectionQuery();\n\n  const [toggleReadingSubscribeUserAction] =\n    useToggleReadingSubscribeUserActionMutation({\n      update() {\n        refetch();\n      },\n    });\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  const {\n    myReadingSubscriptionConnection: {\n      nodes: readingSubscriptions,\n      pageInfo: { hasNextPage, endCursor },\n    },\n  } = data;\n\n  return (\n    <ListComponent\n      loading={loading}\n      hasNextPage={hasNextPage}\n      fetchMore={() => fetchMore({ variables: { after: endCursor } })}\n      dataSource={readingSubscriptions}\n      renderItem={(user: Partial<User>) => (\n        <List.Item\n          key={user.id}\n          actions={[\n            <Popconfirm\n              title={t('confirm_to_unsubscribe')}\n              onConfirm={() =>\n                toggleReadingSubscribeUserAction({\n                  variables: { input: { mixinId: user.mixinId } },\n                })\n              }\n            >\n              <Button size='small'>{t('unsubscribe')}</Button>\n            </Popconfirm>,\n          ]}\n        >\n          <List.Item.Meta\n            title={\n              <a href={`/users/${user.mixinId}`} target='_blank'>\n                {user.name}\n              </a>\n            }\n            avatar={<Avatar src={user.avatar}>{user.name[0]}</Avatar>}\n            description={\n              <Space split={<Divider type='vertical' />} wrap>\n                {`${t('user.bought_articles_count')}: ${\n                  user.statistics.boughtArticlesCount\n                }`}\n                {`${t(\n                  'user.reader_revenue_total',\n                )}: ${user.statistics.readerRevenueTotalUsd.toFixed(2)}`}\n              </Space>\n            }\n          />\n        </List.Item>\n      )}\n    />\n  );\n}\n","import { Button, Divider, List, Popconfirm, Space, Tag } from 'antd';\nimport ListComponent from 'apps/dashboard/components/ListComponent/ListComponent';\nimport LoadingComponent from 'apps/dashboard/components/LoadingComponent/LoadingComponent';\nimport {\n  Tag as ITag,\n  useMyTagSubscriptionConnectionQuery,\n  useToggleSubscribeTagActionMutation,\n} from 'graphqlTypes';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nexport default function MyTagSubscriptionsComponent() {\n  const { t } = useTranslation();\n  const { loading, data, fetchMore, refetch } =\n    useMyTagSubscriptionConnectionQuery();\n\n  const [toggleTagSubscribeUserAction] = useToggleSubscribeTagActionMutation({\n    update() {\n      refetch();\n    },\n  });\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  const {\n    myTagSubscriptionConnection: {\n      nodes: tagSubscriptions,\n      pageInfo: { hasNextPage, endCursor },\n    },\n  } = data;\n\n  return (\n    <ListComponent\n      loading={loading}\n      hasNextPage={hasNextPage}\n      fetchMore={() => fetchMore({ variables: { after: endCursor } })}\n      dataSource={tagSubscriptions}\n      renderItem={(tag: Partial<ITag>) => (\n        <List.Item\n          key={tag.id}\n          actions={[\n            <Popconfirm\n              title={t('confirm_to_unsubscribe')}\n              onConfirm={() =>\n                toggleTagSubscribeUserAction({\n                  variables: { input: { mixinId: tag.id } },\n                })\n              }\n            >\n              <Button size='small'>{t('unsubscribe')}</Button>\n            </Popconfirm>,\n          ]}\n        >\n          <List.Item.Meta\n            title={\n              <div>\n                <a href={`/tags/${tag.id}`} target='_blank'>\n                  <Tag color={tag.color}>#{tag.name}</Tag>\n                </a>\n              </div>\n            }\n            description={\n              <Space split={<Divider type='vertical' />} wrap>\n                {`${t('tag.articles_count')}: ${tag.articlesCount}`}\n                {`${t('tag.subscribers_count')}: ${tag.subscribersCount}`}\n              </Space>\n            }\n          />\n        </List.Item>\n      )}\n    />\n  );\n}\n","import { Alert, PageHeader, Tabs } from 'antd';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport MyAuthoringSubscriptionsComponent from './components/MyAuthoringSubscriptionsComponent';\nimport MyCommentingSubscriptionsComponent from './components/MyCommentingSubscriptionsComponent';\nimport MyReadingSubscriptionsComponent from './components/MyReadingSubscriptionsComponent';\nimport MyTagSubscriptionsComponent from './components/MyTagSubscriptionsComponent';\n\nexport default function SubscriptionsPage() {\n  const { t } = useTranslation();\n  const [type, setType] = useState<'authoring' | 'reading' | 'commenting'>(\n    'authoring',\n  );\n\n  return (\n    <div>\n      <PageHeader title={t('subscriptions_manage')} />\n      <Tabs\n        activeKey={type}\n        onChange={(key: 'authoring' | 'reading' | 'commenting') => setType(key)}\n      >\n        <Tabs.TabPane key='authoring' tab={t('authoring_subscriptions')}>\n          <Alert message={t('authoring_subscriptions_tip')} />\n          <br />\n          <MyAuthoringSubscriptionsComponent />\n        </Tabs.TabPane>\n        <Tabs.TabPane key='readering' tab={t('reading_subscriptions')}>\n          <Alert message={t('reading_subscriptions_tip')} />\n          <br />\n          <MyReadingSubscriptionsComponent />\n        </Tabs.TabPane>\n        <Tabs.TabPane key='commenting' tab={t('commenting_subscriptions')}>\n          <Alert message={t('commenting_subscriptions_tip')} />\n          <br />\n          <MyCommentingSubscriptionsComponent />\n        </Tabs.TabPane>\n        <Tabs.TabPane key='tag' tab={t('tag_subscriptions')}>\n          <Alert message={t('tag_subscriptions_tip')} />\n          <br />\n          <MyTagSubscriptionsComponent />\n        </Tabs.TabPane>\n      </Tabs>\n    </div>\n  );\n}\n"],"names":["ListComponent","props","isMobile","useUserAgent","t","useTranslation","dataSource","hasNextPage","loading","fetchMore","renderItem","size","itemLayout","phone","loadMore","style","textAlign","marginTop","height","lineHeight","onClick","MyAuthoringSubscriptionsComponent","useMyAuthoringSubscriptionConnectionQuery","data","refetch","toggleAuthoringSubscribeUserAction","useToggleAuthoringSubscribeUserActionMutation","update","LoadingComponent","myAuthoringSubscriptionConnection","authoringSubscriptions","nodes","pageInfo","endCursor","variables","after","user","key","id","actions","title","onConfirm","input","mixinId","href","target","name","avatar","src","description","split","type","wrap","statistics","articlesCount","authorRevenueTotalUsd","toFixed","MyCommentingSubscriptionsComponent","useMyCommentingSubscriptionConnectionQuery","toggleCommentingSubscribeArticleAction","useToggleCommentingSubscribeArticleActionMutation","myCommentingSubscriptionConnection","commentingSubscriptions","article","uuid","commentsCount","MyReadingSubscriptionsComponent","useMyReadingSubscriptionConnectionQuery","toggleReadingSubscribeUserAction","useToggleReadingSubscribeUserActionMutation","myReadingSubscriptionConnection","readingSubscriptions","boughtArticlesCount","readerRevenueTotalUsd","MyTagSubscriptionsComponent","useMyTagSubscriptionConnectionQuery","toggleTagSubscribeUserAction","useToggleSubscribeTagActionMutation","myTagSubscriptionConnection","tagSubscriptions","tag","color","subscribersCount","SubscriptionsPage","useState","setType","activeKey","onChange","tab","message"],"sourceRoot":""}